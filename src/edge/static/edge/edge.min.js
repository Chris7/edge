'use strict';function edgeAnnotationDisplayName(annotation){var s=annotation['name']
if(s===undefined||s==''){s=annotation['type'];}
if(annotation['feature_base_first']!=1||annotation['feature_base_last']!=annotation['feature_full_length']){s+='[';if(annotation['feature_base_first']!=1){s+=annotation['feature_base_first'];}
s+=':';if(annotation['feature_base_last']!=annotation['feature_full_length']){s+=annotation['feature_base_last']+'/'+annotation['feature_full_length'];}
s+=']';}
return s;}
function edgeAnnotationSummaryCSS(annotation){var css=['annotation-summary'];if(annotation['type']=='gene'){css.push('btn-danger');}
else if(annotation['type']=='pseudogene'){css.push('btn-warning');}
else if(annotation['type']=='promoter'){css.push('btn-primary');}
else if(annotation['type']=='RBS'){css.push('btn-success');}
else{css.push('btn-info');}
css.push('btn btn-xs');if(annotation['strand']>0){css.push('annotation-strand-fwd');}
else{css.push('annotation-strand-rev');}
return css.join(' ');}
function edgeAnnotationZoomCSS(annotation){var css=['annotation-zoom'];if(annotation['type']=='gene'){css.push('btn-danger');}
else if(annotation['type']=='pseudogene'){css.push('btn-warning');}
else if(annotation['type']=='promoter'){css.push('btn-primary');}
else if(annotation['type']=='RBS'){css.push('btn-success');}
else{css.push('btn-info');}
css.push('btn btn-xs');if(annotation['strand']>0){css.push('annotation-strand-fwd');}
else{css.push('annotation-strand-rev');}
return css.join(' ');}
function edgeFetchChanges($http,fragment_id,changed_loc,cb){var url='/edge/fragments/'+fragment_id+'/annotations?f='+changed_loc[0]+'&l='+changed_loc[1];$http.get(url).success(function(data){var annotations=[];data.forEach(function(annotation){var s=edgeAnnotationDisplayName(annotation);annotations.push(s);});cb(annotations.join(', '));});}
function GenomeListController($scope,$http){function fetchAndSaveParent(genome){var url='/edge/genomes/'+genome['parent_id'];$http.get(url).success(function(data){genome['parent']=data['name'];});}
$http.get('/edge/genomes').success(function(data){$scope.genomes=data;data.forEach(function(genome){if(genome['parent_id']){fetchAndSaveParent(genome);}});});$scope.orderProp='id';}
function FragmentListController($scope,$http){$http.get('/edge/fragments').success(function(data){$scope.fragments=data;});$scope.orderProp='id';$scope.add_fragment_error=undefined;$scope.addFragment=function(fragment){var data=JSON.stringify(fragment);$http.post('/edge/fragments',data).success(function(data){$scope.fragments.push(data);$scope.add_fragment_error=undefined;}).error(function(data,status,headers,config){$scope.add_fragment_error=data;});}}
function GenomeDetailController($scope,$routeParams,$http){$scope.genomeId=$routeParams.genomeId;$scope.changes=[];$scope.parent=undefined;function fetchParent(parent_id){var url='/edge/genomes/'+parent_id;$http.get(url).success(function(data){$scope.parent='<a href="#/genomes/'+data['id']+'">Genome '+data['id']+': '+data['name']+'</a>';});}
$http.get('/edge/genomes/'+$scope.genomeId).success(function(data){$scope.genome=data;if(data['parent_id']){fetchParent(data['parent_id']);}
data['fragments'].forEach(function(fragment){if(fragment['changes']){fragment['changes'].forEach(function(changed_loc){edgeFetchChanges($http,fragment['id'],changed_loc,function(desc){$scope.changes.push(fragment['name']+': '+desc);});});}});});}
function FragmentController($scope,$routeParams,$http){var DEFAULT_ZOOM=2000;$scope.featureTypes=edgeFeatureTypes;$scope.fragmentId=$routeParams.fragmentId;$scope.fragment=undefined;$scope.annotations=[]
$scope.display_summary=true;$scope.summary_annotations=[];$scope.zoom={};function layoutAnnotations(annotations,base_first,base_last){var full_length=base_last-base_first+1;var display=[];var layers=[];annotations.forEach(function(a){var d={};d['annotation']=a;d['title']=a.display_name+' ('+a.type+')';d['css']=edgeAnnotationZoomCSS(a);var sliced=false;var slice=[1,a['base_last']-a['base_first']+1];var a_first=a['base_first'];if(a_first<base_first){a_first=base_first;sliced=true;slice[0]=base_first-a['base_first']+1;}
var a_last=a['base_last'];if(a_last>base_last){a_last=base_last;sliced=true;slice[1]=base_last-a['base_first']+1;}
if(sliced){d['title']+=' ('+slice[0]+'-'+slice[1]+')';}
var left=(a_first-base_first)*100.0/full_length;d['left']=''+left+'%';var width=(a_last-a_first+1)*100.0/full_length;d['width']=''+width+'%';var found_layer_i=undefined;for(var i=0;i<layers.length;i++){var layer=layers[i];var overlap=false;layer.forEach(function(layer_a){if(layer_a['base_last']+100>=a['base_first']){overlap=true;}});if(overlap==false){found_layer_i=i;layer.push(a);break;}}
if(found_layer_i===undefined){found_layer_i=layers.length;layers.push([a]);}
d['css']+=' annotation-layer-'+found_layer_i;display.push(d);});return display;}
$scope.fetchSequence=function(){if($scope.display_summary==false){var f=$scope.zoom['base_first'];var l=$scope.zoom['base_last'];$http.get('/edge/fragments/'+$scope.fragmentId+'/sequence?f='+f+'&l='+l).success(function(data){$scope.zoom['sequence']=data;$scope.zoom['has_sequence']=true;if($scope.zoom['sequence_viewer']===undefined){$scope.zoom['sequence_viewer']=SequenceViewer(jQuery,{dom_id:'sequence-viewer'});}
$scope.zoom['sequence_viewer'].setSequence(data.sequence,f);});}}
$scope.zoomRefresh=function(base_first,base_last){var zoom_annotations=[];var min_bp=undefined;var max_bp=undefined;$scope.annotations.forEach(function(a){if(a['base_last']>base_first&&a['base_first']<base_last){zoom_annotations.push(a);if(min_bp===undefined||a['base_first']<min_bp){min_bp=a['base_first'];}
if(max_bp===undefined||a['base_last']>max_bp){max_bp=a['base_last'];}}});if(zoom_annotations.length>0&&false){zoom_annotations.sort(function(a,b){return a['base_first']-b['base_first'];});$scope.zoom['base_first']=Math.min(min_bp,base_first);$scope.zoom['base_last']=Math.max(max_bp,base_last);}
else{$scope.zoom['base_first']=base_first;$scope.zoom['base_last']=base_last;}
$scope.zoom['annotations']=zoom_annotations;var display=layoutAnnotations(zoom_annotations,$scope.zoom['base_first'],$scope.zoom['base_last']);$scope.zoom['display']=display;$scope.zoom['has_sequence']=false;if($scope.zoom['sequence_viewer']!==undefined){$scope.zoom['sequence_viewer'].clear();}}
$scope.zoomAt=function(annotation){ $scope.zoom={};$scope.display_summary=false; var base_first=annotation['base_first']-DEFAULT_ZOOM;if(base_first<1){base_first=1;}
var base_last=annotation['base_last']+DEFAULT_ZOOM;if(base_last>$scope.fragment['length']){base_last=$scope.fragment['length'];}
$scope.zoomRefresh(base_first,base_last);}
$scope.zoomAtExact=function(annotation){ $scope.zoom={};$scope.display_summary=false;var base_first=annotation['base_first'];var base_last=annotation['base_last'];if(base_last>$scope.fragment['length']){base_last=$scope.fragment['length'];}
$scope.zoomRefresh(base_first,base_last);}
$scope.zoomMoveRight=function(){var cur_zoom=$scope.zoom['base_last']-$scope.zoom['base_first']+1;var base_first=$scope.zoom['base_last'];var base_last=base_first+cur_zoom;if(base_last>$scope.fragment['length']){base_last=$scope.fragment['length'];}
if(base_first<base_last){$scope.zoomRefresh(base_first,base_last);}}
$scope.zoomMoveLeft=function(){var cur_zoom=$scope.zoom['base_last']-$scope.zoom['base_first']+1;if($scope.zoom['base_first']>1){var base_last=$scope.zoom['base_first'];var base_first=base_last-cur_zoom;if(base_first<1){base_first=1;}
if(base_first<base_last){$scope.zoomRefresh(base_first,base_last);}}}
$scope.zoomOut=function(){var base_first=$scope.zoom['base_first']-DEFAULT_ZOOM;var base_last=$scope.zoom['base_last']+DEFAULT_ZOOM;if(base_first<1){base_first=1;}
if(base_last>$scope.fragment['length']){base_last=$scope.fragment['length'];}
$scope.zoomRefresh(base_first,base_last);}
$scope.zoomIn=function(){if($scope.zoom['base_last']-$scope.zoom['base_first']>2*DEFAULT_ZOOM){var base_first=$scope.zoom['base_first']+DEFAULT_ZOOM;var base_last=$scope.zoom['base_last']-DEFAULT_ZOOM;$scope.zoomRefresh(base_first,base_last);}}
$scope.showSummary=function(){$scope.zoom={'base_first':1,'base_last':$scope.fragment['length'],'annotations':$scope.annotations};$scope.display_summary=true;}
$scope.annotate_error=undefined;$scope.addAnnotation=function(annotation){var data=JSON.stringify(annotation);$http.post('/edge/fragments/'+$scope.fragmentId+'/annotations',data).success(function(data){var len=annotation['base_last']-annotation['base_first']+1;var new_a={base_first:annotation['base_first'],base_last:annotation['base_last'],name:annotation['name'],type:annotation['type'],strand:annotation['strand'],feature_full_length:len,feature_base_first:1,feature_base_last:len};new_a['display_name']=edgeAnnotationDisplayName(new_a);new_a['display_css']=edgeAnnotationSummaryCSS(new_a);$scope.annotations.push(new_a);$scope.annotate_error=undefined;$scope.zoomRefresh($scope.zoom['base_first'],$scope.zoom['base_last']);}).error(function(data,status,headers,config){$scope.annotate_error=data;});}
$http.get('/edge/fragments/'+$scope.fragmentId).success(function(fragment){$scope.fragment=fragment;});$http.get('/edge/fragments/'+$scope.fragmentId+'/annotations').success(function(annotations){$scope.annotations=annotations;annotations.forEach(function(annotation){annotation['display_name']=edgeAnnotationDisplayName(annotation);annotation['display_css']=edgeAnnotationSummaryCSS(annotation);var gap=0;
 gap+=parseInt(annotations.length/200)*500;var last_annotation=undefined;if($scope.summary_annotations.length>0){last_annotation=$scope.summary_annotations[$scope.summary_annotations.length-1];}
if(last_annotation===undefined||last_annotation['base_last']+gap<annotation['base_first']){$scope.summary_annotations.push(annotation);}});$scope.showSummary();});$scope.query=undefined;$scope.annotationOrderProp='base_first';}
function GenomeFragmentController($scope,$routeParams,$injector,$http){$injector.invoke(FragmentController,this,{$scope:$scope});$scope.genomeId=$routeParams.genomeId;$scope.genome=undefined;$scope.changes=[];$http.get('/edge/genomes/'+$scope.genomeId).success(function(genome){$scope.genome=genome;genome['fragments'].forEach(function(fragment){if(fragment['id']==$scope.fragmentId){if(fragment['changes']){fragment['changes'].forEach(function(changed_loc){edgeFetchChanges($http,fragment['id'],changed_loc,function(desc){$scope.changes.push(desc);});});}}});});}
function GenomeOpController($scope,$http,$location){$scope.op_error=undefined;$scope.doOp=function(action,op){op['op']=action;var data=JSON.stringify(op);$http.put('/edge/genomes/'+$scope.genomeId+'/fragments/'+$scope.fragmentId,data).success(function(genome){ $scope.op_error=undefined;var url='/edge/genomes/'+genome.id;$location.path(url);}).error(function(data,status,headers,config){$scope.op_error=data;});}}
function GenomeOpWithFragmentController($scope,$http){$http.get('/edge/fragments').success(function(data){$scope.fragments=data;});$scope.orderProp='name';}
angular.module('edge',[]).config(['$routeProvider',function($routeProvider){$routeProvider.when('/genomes',{templateUrl:'partials/genome-list.html',controller:GenomeListController}).when('/genomes/:genomeId',{templateUrl:'partials/genome-detail.html',controller:GenomeDetailController}).when('/genomes/:genomeId/fragments/:fragmentId',{templateUrl:'partials/genome-fragment.html',controller:GenomeFragmentController}).when('/fragments',{templateUrl:'partials/fragment-list.html',controller:FragmentListController}).when('/fragments/:fragmentId',{templateUrl:'partials/fragment-detail.html',controller:FragmentController}).otherwise({redirectTo:'/genomes'});}])
var edgeFeatureTypes=["-10_signal","-35_signal","3'UTR","5'UTR","ARS","assembly_gap","attenuator","binding_site","CAAT_signal","CDS","centromere","C_region","D-loop","D_segment","enhancer","exon","gap","GC_signal","gene","gene_cassette","iDNA","insertion","intron","J_segment","long_terminal_repeat","LTR","LTR_retrotransposon","mat_peptide","misc_binding","misc_difference","misc_feature","misc_recomb","misc_RNA","misc_signal","misc_structure","mobile_element","mRNA","ncRNA","non_transcribed_region","nucleotide_match","N_region","operon","oriT","polyA_signal","polyA_site","precursor_RNA","primer_bind","prim_transcript","promoter","protein_bind","pseudogene","RBS","RBS","region","repeat_region","rep_origin","rRNA","sig_peptide","snoRNA","snRNA","stem_loop","STS","S_region","TATA_signal","telomere","telomeric_repeat","terminator","tmRNA","transit_peptide","transposable_element_gene","tRNA","variation","V_region","V_segment","X_element","Y_prime_element",];window.SequenceViewer=function($,options){var dom_id='sequence-viewer';if('dom_id'in options){dom_id=options.dom_id;}
var selector='#'+dom_id;$(selector).html('<table></table>');function clear(){$('table',selector).empty();}
function setSequence(sequence,start_bp,rowlen,column){rowlen=typeof rowlen!=='undefined'?rowlen:80;column=typeof column!=='undefined'?column:10;clear();var rsplit=new RegExp('(.{1,'+rowlen+'})','g');var csplit=new RegExp('(.{1,'+column+'})','g');var rows=sequence.match(rsplit);var tr=$('<tr></tr>');var s=start_bp;var td_s=$('<td class="sequence-pos"></td>');var td_d=$('<td class="sequence-data"></td>');var td_l=$('<td class="sequence-pos"></td>');for(var i=0;i<rows.length;i++){var l=s+rows[i].length-1;td_s.append(s+'<br/>');var columns=rows[i].match(csplit);for(var j=0;j<columns.length;j++){td_d.append('<span>'+columns[j]+'</span>');}
td_d.append('<br/>');td_l.append(l+'<br/>');s=l+1;}
tr.append(td_s);tr.append(td_d);tr.append(td_l);$('table',selector).append(tr);}
return{clear:clear,setSequence:setSequence}}